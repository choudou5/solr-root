<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-lazy-init="true">

	<description>Task Configuration</description>

    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:system.properties" />
	
	 <!-- 线程池 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${task.corePoolSize}" /><!-- 核心线程数 -->
		<property name="maxPoolSize" value="${task.maxPoolSize}" /><!-- 最大线程数 -->
		<property name="queueCapacity" value="${task.queueCapacity}" /><!-- 队列最大长度  -->
		<property name="keepAliveSeconds" value="${task.keepAliveSeconds}" /><!-- 线程池维护线程所允许的空闲时间 (秒)， 即 线程空闲时间超过n秒会关闭-->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
		<!-- 线程池对拒绝任务(无线程可用)的处理策略：
			 AbortPolicy （默认）中，处理程序遭到拒绝将抛出运行时RejectedExecutionException。
			 CallerRunsPolicy 中，线程调用运行该任务的execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。
			 DiscardPolicy 中，不能执行的任务将被删除。
			 DiscardOldestPolicy 中，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则
		-->
	</bean>
	
</beans>